1.RabbitMQ简介
    AMQP,即Advanced Message Queuing Protocol, 高级消息队列协议，是应用层协议的一个开放标准,为面向消息
    的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。

    AMQP的主要特征是面向消息、队列、路由(包括点对点和发布/订阅)、可靠性、安全。

    RabbitMQ是一个开源的AMQP实现，服务端用Erlang语言编写，支持多种客户端，如: python, ruby, net,支持AJAX，
    用于在分布式系统中存储转发消息，在易用性，扩展性，靠可用性等方面表现不俗。

2. ConnectionFactory、Connection、Channel
    ConnectionFactory, Connection, Channel都是RabbitMQ对外提供的API中最基本的对象。Connection是RabbitMQ的
    socket连接，他封装了socket协议相关部分逻辑。ConnectionFactory为Connection的制造工厂。Channel是我们与
    RabbitMQ打交道的最重要的一个接口， 我们大部分的业务操作都是在Channel这个接口中完成的，包括定义Queue,
    定义Exchange,绑定Queue与Exchanage, 发布消息等。

3. Queue
    Queue(队列)是RabbitMQ的内部对象，用于存储消息。
    RabbitMQ中消息都只能存储在Queue中，生产者生产消息并最终投递到Queue中，消费者可以从Queue中获取消息并消费。
    多个消费者可以订阅同一个Queue，这时Queue中的消息会被平均分摊给多个消费者进行处理，而不是每个消费者都收到
    所有的消息并处理。

4. Message acknowledgment
    在实际应用中，可能会发生消费者收到Queue中的消息，但没有处理完成就宕机(或出现其他意外)的情况，这种情况
    下就可能导致消息丢失，为了避免这种情况发生，我们可以要求消费者在消费完消息后发送一个回执给RabbitMQ,RabbitMQ中消息都只能存储在Queue中
    收到消息回执(Message acknowledgement)后才将该消息从Queue中移除；如果RabbitMQ没有收到回执并检测到消费者
    的RabbitMQ连接断开，则RabbitMQ会将该消息发送给其他消费者进行处理。这里不存在timeout概念，一个消费者处理消息
    时间再长也不会导致该消息被发送给其他消费者，除非他的RabbitMQ连接断开。

    这里会产生另一个问题，如果我们的开发人员在处理完业务逻辑后，忘记发送回执给RabbitMQ,这将会导致严重的bug--Queue
    中堆积的消息会越来越多；消费者重启后会重复消费这些消息并重复执行业务逻辑。

5. Message durability
    如果我们希望即使在RabbitMQ服务重启的情况下，也不会丢失消息，我们可以将Queue与Message都设置为可持久化的(durable),
    这样可以保证绝大部分情况下我们的RabbitMQ消息不会丢失。但依然解决不了小概率丢失事件的发生，如果我们需要对
    这种小概率事件也要管理起来，那么我们要用到事务。

6. Prefetch count
    前面我们讲到如果有多个消费者同时订阅同一个Queue中的消息， Queue中的消息会被平摊给多个消费者。这时如果每个
    消息处理时间不同，就有可能导致某些消费者一直在忙，而另外一些消费者很快就处理完手头工作并一直空闲的情况。
    我们可以通过设置prefetchCount来限制Queue每次发送给每个消费者的消息数，比如我们设置prefetchCount=1,则Queue每次
    给每个消费者发送一条消息；消费者处理完这条消息后Queue会再给该消费者发送一条消息。

7. Exchange
    在上一节我们看到生产者将消息投递到Queue中，实际上这在RabbitMQ中这种事情永远都不会发生。实际情况是，生产者将
    消息发送到Exchange（交换机）,由Exchange将消息路由到一个或多个Queue中(或者丢弃)

8. routing key
    生产者在将消息发送给Exchange的时候，一般会指定一个routing key,来指定这个消息的路由规则，而这个routing key
    需要与exchange type及binding key联合使用才能最终生效。

9. exchange types
    RabbitMQ常用的Exchange Type有fanout, direct, topic, headers这四种
    |-- fanout
        fanout类型的Exchange路由规则非常简单，他会把所有发送到该Exchange的消息，路由到所有与他绑定的Queue中。
    |-- direct
        他把消息路由到那些binding key与routing key完全匹配的Queue中。
